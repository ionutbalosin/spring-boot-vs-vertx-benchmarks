buildscript {

    ext {
        springBootVersion = '2.0.4.RELEASE'
        springCloudVersion = 'Finchley.SR1'
        springZuulVersion = '2.0.0.M2'
        jmhVersion = '1.21'
    }

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("me.champeau.gradle:jmh-gradle-plugin:0.4.7")
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }

}

allprojects {
    group = 'org.ib'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    defaultTasks 'clean', 'build'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://mvnrepository.com/artifact" }
        maven { url 'http://repo.spring.io/release/' }
        maven { url "http://repo.spring.io/libs-release-local" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/libs-milestone-local" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-snapshot-local" }
    }

	ext {
		uploadArchivesType = 'app'
	}
}

project(':vanilla-vertx') {
    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        classifier = 'fat'
        mergeServiceFiles {
            include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        }
        archiveName = "${baseName}-${version}.${extension}"
        manifest {
            attributes 'Main-Class': 'org.ib.vertx.vanillavertx.VanillaVertxApplication'
        }
    }

    dependencies {
        compile('io.vertx:vertx-core:3.5.3')
        compile('io.vertx:vertx-web:3.5.3')
        compile('org.apache.logging.log4j:log4j-api:2.7')
        compile('org.apache.logging.log4j:log4j-core:2.7')
        compile('com.lmax:disruptor:3.3.6') // for asynch logging
    }

}

project(':vanilla-spring-boot') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
    }
}

project(':benchmarks') {
    apply plugin: "me.champeau.gradle.jmh"

    jmh {

        // > Below options fix the issue regarding <failed to invoke the VM, caught IOException: Cannot run program "$JAVA_HOME\java.exe": CreateProcess error=206, The filename or extension is too long>
        verbosity = 'EXTRA'
        jvmArgs = ['-Djmh.separateClasspathJAR=true']
        include = '.*Benchmark.*'

        // > JMH Settings
        //warmupIterations = 2
        //iterations = 5
        //fork = 2
        //timeUnit = 's'
        //timeOnIteration = '10s'

        // > GC Settings
        //forceGC = true // Should JMH force GC between iterations?
        //jvmArgs = "-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -XX:StartFlightRecording=duration=60s,delay=30s,filename=recording.jfr"
        //jvmArgs = '-XX:+UseG1GC'
        //jvmArgs = "-verbose:gc -Xloggc:/dev/shm/jvm.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintTLAB"
    }

    dependencies {
        compile("org.openjdk.jmh:jmh-core:${jmhVersion}")
        // > Not needed this since it is already covered by the jmh-gradle-plugin:jmhCompileGeneratedClasses task
        //compile("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
    }
}