buildscript {

    ext {
        springBootVersion = '2.0.4.RELEASE'
        springCloudVersion = 'Finchley.SR1'
        springZuulVersion = '2.0.0.M2'
        jmhVersion = '1.21'
    }

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("me.champeau.gradle:jmh-gradle-plugin:0.4.7")
        classpath("gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.3.11")
    }

}

allprojects {
    group = 'org.ib'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: "org.jetbrains.intellij"

    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://mvnrepository.com/artifact" }
        maven { url 'http://repo.spring.io/release/' }
        maven { url "http://repo.spring.io/libs-release-local" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/libs-milestone-local" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-snapshot-local" }
    }

	ext {
		uploadArchivesType = 'app'
	}
}

project(':vanilla-vertx') {
    dependencies {
        compile('io.vertx:vertx-core:3.5.3')
        compile('io.vertx:vertx-web:3.5.3')
        compile('org.apache.logging.log4j:log4j-api:2.7')
        compile('org.apache.logging.log4j:log4j-core:2.7')
        compile('com.lmax:disruptor:3.3.6') // for asynch logging
    }
}

project(':vanilla-spring-boot') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')    
    }
}

project(':benchmarks') {
    apply plugin: "me.champeau.gradle.jmh"

    // See https://github.com/melix/jmh-gradle-plugin/issues/125
    //tasks.getByName('jmhJar').doFirst() {duplicatesStrategy(DuplicatesStrategy.EXCLUDE)}
    //jmh {
    //   duplicateClassesStrategy = 'exclude'
    //}

    dependencies {
        compile("org.openjdk.jmh:jmh-core:${jmhVersion}")
        //compile("org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}")
    }
}